/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 * 
 * SPDX-License-Identifier: MIT
 */

/* ****************************************************************************************
 * Include
 */

//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
#include "mcuf/RunnableEvent.h"

/* ****************************************************************************************
 * Macro
 */

/* ****************************************************************************************
 * Using
 */

//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
using mcuf::function::RunnableEvent;

/* ****************************************************************************************
 * Variable <Static>
 */

/* ****************************************************************************************
 * Construct Method
 */
/**
 * @brief Construct a new Runnable Event object
 * 
 */
RunnableEvent::RunnableEvent(void){
  RunnableEvent::mFunction = nullptr;
}

/**
 * @brief Construct a new Runnable Event object
 * 
 * @param event 
 */
RunnableEvent::RunnableEvent(void (*function)(void)){
  RunnableEvent::mFunction = function;
  return;
}

/**
 * @brief Destroy the Runnable Event object
 * 
 */
RunnableEvent::~RunnableEvent(void){
  return;
}

/* ****************************************************************************************
 * Operator Method
 */

/* ****************************************************************************************
 * Public Method <Static>
 */

/* ****************************************************************************************
 * Public Method <Override>
 */
/**
 * @brief 
 * 
 */
void RunnableEvent::run(void){
  if(RunnableEvent::mFunction != nullptr)
    RunnableEvent::mFunction();
}
/* ****************************************************************************************
 * Public Method
 */

/* ****************************************************************************************
 * Protected Method <Static>
 */

/* ****************************************************************************************
 * Protected Method <Override>
 */

/* ****************************************************************************************
 * Protected Method
 */

/* ****************************************************************************************
 * Private Method
 */

/* ****************************************************************************************
 * End of file
 */
