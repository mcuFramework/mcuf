/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 * 
 * SPDX-License-Identifier: MIT
 */

/* ****************************************************************************************
 * Include
 */

//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
#include "./CoreTick.h"

/* ****************************************************************************************
 * Macro
 */

/* ****************************************************************************************
 * Using
 */

//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
using mcuf::CoreTick;

/* ****************************************************************************************
 * Variable <Static>
 */

/* ****************************************************************************************
 * Construct Method
 */

/**
 * @brief Construct a new Core Tick object
 * 
 * @param executeQueue 
 */
CoreTick::CoreTick(uint32_t executeQueue, uint32_t tickBase) : 
mExecutor(executeQueue){
  
  this->mTickBase = tickBase;
  return;
}

/**
 * @brief Destroy the Core Tick object
 * 
 */
CoreTick::~CoreTick(void){
  this->cancel();
  this->mExecutor.clear();
  return;
}

/* ****************************************************************************************
 * Operator Method
 */

/* ****************************************************************************************
 * Public Method <Static>
 */

/* ****************************************************************************************
 * Public Method <Override> - mcuf::Runnable
 */

/**
 * @brief 
 * 
 */
void CoreTick::run(void){
  int count = static_cast<int>(this->mExecutor.size());

  for(int i=0; i<count; ++i)
    this->mExecutor.actionSingle();
    
  return;
}
/* ****************************************************************************************
 * Public Method
 */

/* ****************************************************************************************
 * Protected Method <Static>
 */

/* ****************************************************************************************
 * Protected Method <Override>
 */

/* ****************************************************************************************
 * Protected Method
 */

/* ****************************************************************************************
 * Private Method
 */

/* ****************************************************************************************
 * End of file
 */
