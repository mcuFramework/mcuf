/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 * 
 * SPDX-License-Identifier: MIT
 */

#ifndef MCUF_FC6FA4E2_E818_4894_866D_38F6B2541263
#define MCUF_FC6FA4E2_E818_4894_866D_38F6B2541263

/* ****************************************************************************************
 * Include
 */  
#include "mcuf_base.h"
#include "mcuf/function/BiConsumer.h"
#include "mcuf/lang/Object.h"

/* ****************************************************************************************
 * Namespace
 */  
namespace mcuf{
  namespace function{
    template<typename T, typename U> class BiConsumerEvent;
  }
}



/* ****************************************************************************************
 * Class BiConsumerEvent
 */  
template<class T, class U>
class mcuf::function::BiConsumerEvent extends mcuf::lang::Object
      implements mcuf::function::BiConsumer<T, U> {

  /* **************************************************************************************
   * Subclass
   */

  /* **************************************************************************************
   * Variable <Public>
   */

  /* **************************************************************************************
   * Variable <Protected>
   */

  /* **************************************************************************************
   * Variable <Private>
   */
  private: void (*mEvent)(T, U);


  /* **************************************************************************************
   * Abstract method <Public>
   */
  
  /* **************************************************************************************
   * Abstract method <Protected>
   */

  /* **************************************************************************************
   * Construct Method
   */

  /**
   * Construct.
   */
  public: BiConsumerEvent(void (*event)(T, U)){

    this->mEvent = event;
    return;
  }
  
  /**
   * Destructor.
   */
  public: ~BiConsumerEvent() = default;

  /* **************************************************************************************
   * Operator Method
   */

  /* **************************************************************************************
   * Public Method <Static>
   */

  /* **************************************************************************************
   * Public Method <Override>
   */

  /**
   * 
   */
  public: virtual void accept(T t, U u){
    this->mEvent(t, u);
  }

  /* **************************************************************************************
   * Public Method
   */

  /* **************************************************************************************
   * Protected Method <Static>
   */

  /* **************************************************************************************
   * Protected Method <Override>
   */

  /* **************************************************************************************
   * Protected Method
   */

  /* **************************************************************************************
   * Private Method <Static>
   */

  /* **************************************************************************************
   * Private Method <Override>
   */
   
  /* **************************************************************************************
   * Private Method
   */
   
};



/* *****************************************************************************************
 * End of file
 */ 


#endif/* MCUF_FC6FA4E2_E818_4894_866D_38F6B2541263 */
