/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 * 
 * SPDX-License-Identifier: MIT
 */
#ifndef frameworl_function_BiConsumerEvent_hpp_
#define frameworl_function_BiConsumerEvent_hpp_

/* ****************************************************************************************
 * Include
 */  
#include "../function/BiConsumer.hpp"



/* ****************************************************************************************
 * Namespace
 */  
namespace mcuf{
  namespace function{
    template<typename T, typename U> class BiConsumerEvent;
  }
}



/* ****************************************************************************************
 * Class BiConsumerEvent
 */  
template<class T, class U>
class mcuf::function::BiConsumerEvent : 
      public mcuf::function::BiConsumer<T, U>{

  /* **************************************************************************************
   * Subclass
   */

  /* **************************************************************************************
   * Variable <Public>
   */

  /* **************************************************************************************
   * Variable <Protected>
   */

  /* **************************************************************************************
   * Variable <Private>
   */
  private: void (*event)(T, U);


  /* **************************************************************************************
   * Abstract method <Public>
   */
  
  /* **************************************************************************************
   * Abstract method <Protected>
   */

  /* **************************************************************************************
   * Construct Method
   */

  /**
   * Construct.
   */
  public: BiConsumerEvent(void (*event)(T, U)){

    this->event = event;
    return;
  }
  
  /**
   * Disconstruct.
   */
  public: virtual ~BiConsumerEvent() = default;

  /* **************************************************************************************
   * Operator Method
   */

  /* **************************************************************************************
   * Public Method <Static>
   */

  /* **************************************************************************************
   * Public Method <Override>
   */

  /**
   * 
   */
  public: virtual void accept(T t, U u){
    this->event(t, u);
  }

  /* **************************************************************************************
   * Public Method
   */

  /* **************************************************************************************
   * Protected Method <Static>
   */

  /* **************************************************************************************
   * Protected Method <Override>
   */

  /* **************************************************************************************
   * Protected Method
   */

  /* **************************************************************************************
   * Private Method <Static>
   */

  /* **************************************************************************************
   * Private Method <Override>
   */
   
  /* **************************************************************************************
   * Private Method
   */
   
};



#endif //frameworl_function_BiConsumerEvent_hpp_
/* *****************************************************************************************
 * End of file
 */ 
