/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 * 
 * SPDX-License-Identifier: MIT
 */

#ifndef MCUF_B7C59389_FEAA_4CBA_B589_2658C300DF4C
#define MCUF_B7C59389_FEAA_4CBA_B589_2658C300DF4C

/* ****************************************************************************************
 * Include
 */  
#include "Base.hpp"



/* ****************************************************************************************
 * Namespace
 */
namespace mcuf{
  namespace hal{
    class AnalogDigitalConverter;
  }
}



/* ****************************************************************************************
 * Class AnalogDigitalConverter
 */  
class mcuf::hal::AnalogDigitalConverter: 
      public mcuf::hal::Base{

  /* **************************************************************************************
   * Subclass
   */
  public: class Channel;

  /* **************************************************************************************
   * Variable <Public>
   */

  /* **************************************************************************************
   * Variable <Protected>
   */

  /* **************************************************************************************
   * Variable <Private>
   */

  /* **************************************************************************************
   * Abstract method <Public>
   */

  /**
   * 
   */
  public: virtual bool enableChannel(uint32_t channel) = 0;
  
  /**
   * 
   */
  public: virtual bool disableChannel(uint32_t channel) = 0;
  
  /**
   * 
   */
  public: virtual uint32_t read(uint32_t channel) = 0;
  
  /* **************************************************************************************
   * Abstract method <Protected>
   */

  /* **************************************************************************************
   * Construct Method
   */

  /**
   * 
   */
  public: AnalogDigitalConverter(void) = default;
  
  /**
   * 
   */
  public: virtual ~AnalogDigitalConverter() = default;
  
  /* **************************************************************************************
   * Operator Method
   */

  /* **************************************************************************************
   * Public Method <Static>
   */

  /* **************************************************************************************
   * Public Method <Override>
   */

  /* **************************************************************************************
   * Public Method
   */

  /* **************************************************************************************
   * Protected Method <Static>
   */

  /* **************************************************************************************
   * Protected Method <Override>
   */

  /* **************************************************************************************
   * Protected Method
   */

  /* **************************************************************************************
   * Private Method <Static>
   */

  /* **************************************************************************************
   * Private Method <Override>
   */
   
  /* **************************************************************************************
   * Private Method
   */
};





/* ****************************************************************************************
 * Class AnalogDigitalConverter::Channel
 */  
class mcuf::hal::AnalogDigitalConverter::Channel:
      public mcuf::lang::Object{

  /* **************************************************************************************
   * Subclass
   */

  /* **************************************************************************************
     * Variable <Public>
   */

  /* **************************************************************************************
   * Variable <Protected>
   */

  /* **************************************************************************************
   * Variable <Private>
   */

  /* **************************************************************************************
   * Abstract method <Public>
   */

  /**
   * 
   */
  public: virtual bool enable(void) = 0;
  
  /**
   * 
   */
  public: virtual bool disable(void) = 0;
  
  /**
   * 
   */
  public: virtual uint32_t read(void) = 0;

  /* **************************************************************************************
   * Abstract method <Protected>
   */

  /* **************************************************************************************
   * Construct Method
   */

  /**
   * 
   */
  public: Channel(void) = default;
  
  /**
   * 
   */
  public: virtual ~Channel(void) = default;

  /* **************************************************************************************
   * Operator Method
   */

  /* **************************************************************************************
   * Public Method <Static>
   */

  /* **************************************************************************************
   * Public Method <Override>
   */

  /* **************************************************************************************
   * Public Method
   */

  /* **************************************************************************************
   * Protected Method <Static>
   */

  /* **************************************************************************************
   * Protected Method <Override>
   */

  /* **************************************************************************************
   * Protected Method
   */

  /* **************************************************************************************
   * Private Method <Static>
   */

  /* **************************************************************************************
   * Private Method <Override>
   */
   
  /* **************************************************************************************
   * Private Method
   */  
};  



/* *****************************************************************************************
 * End of file
 */ 


#endif/* MCUF_B7C59389_FEAA_4CBA_B589_2658C300DF4C */
