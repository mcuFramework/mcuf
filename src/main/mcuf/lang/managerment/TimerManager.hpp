/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 * 
 * SPDX-License-Identifier: MIT
 */

#ifndef MCUF_DAABF10E_A6DD_48CC_9079_D339B3588669
#define MCUF_DAABF10E_A6DD_48CC_9079_D339B3588669

/* ****************************************************************************************
 * Include
 */  

//-----------------------------------------------------------------------------------------
#include "mcuf_base.h"
#include "mcuf/util/TimerScheduler.hpp"

/* ****************************************************************************************
 * Namespace
 */  
namespace mcuf{
  namespace lang{
    namespace managerment{
      class TimerManager;
    }
  }
}

/* ****************************************************************************************
 * Class Object
 */  
class mcuf::lang::managerment::TimerManager extends mcuf::util::TimerScheduler{

  /* **************************************************************************************
   * Subclass
   */

  /* **************************************************************************************
   * Variable <Public>
   */

  /* **************************************************************************************
   * Variable <Protected>
   */

  /* **************************************************************************************
   * Variable <Private>
   */
  private: uint64_t mTimerMemory[4];
  private: void* mTimerID;
  private: uint32_t mTick;

  /* **************************************************************************************
   * Abstract method <Public>
   */

  /* **************************************************************************************
   * Abstract method <Protected>
   */

  /* **************************************************************************************
   * Construct Method
   */

  /**
   * Construct.
   */
  public: TimerManager(mcuf::lang::Memory& memory);

  /**
   * Disconstruct.
   */
  public: virtual ~TimerManager(void) = default;

  /* **************************************************************************************
   * Operator Method
   */

  /* **************************************************************************************
   * Public Method <Static>
   */

  /* **************************************************************************************
   * Public Method <Override>
   */

  /* **************************************************************************************
   * Public Method
   */
   
  /**
   *
   */
  public: bool start(uint32_t tick);
  
  /**
   *
   */
  public: bool stop(void);

  /* **************************************************************************************
   * Protected Method <Static>
   */

  /* **************************************************************************************
   * Protected Method <Override>
   */

  /* **************************************************************************************
   * Protected Method
   */

  /* **************************************************************************************
   * Private Method <Static>
   */
  
  /**
   *
   */
  private: static void entryPoint(void* attachment);

  /* **************************************************************************************
   * Private Method <Override>
   */
   
  /* **************************************************************************************
   * Private Method
   */  

};

/* *****************************************************************************************
 * End of file
 */ 

#endif/* MCUF_DAABF10E_A6DD_48CC_9079_D339B3588669 */
